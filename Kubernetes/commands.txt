
kubectl create deployment helloworld --image=gcr.io/google_containers/echoserver:1.4

kubectl expose deployment helloworld --type=NodePort --port 8080
kubectl get services
minikube service helloworld --url
curl http://207.148.101.217:31129
kubectl apply -f nginx-deployment.yaml
kubectl expose deployment nginx-deployment1 --type=NodePort --port 80
kubectl get services

 ################replication controller
  150  kubectl apply -f nginx-replicationcontroller.yml
  151  kubectl describe replicationcontrollers/nginx
  152  pods=$(kubectl get pods --selector=app=nginx --output=jsonpath={.items..metadata.name})
  153  echo $pods
  157  kubectl delete pods --selector=app=nginx
  158  kubectl describe replicationcontrollers/nginx
  159  kubectl delete replicationcontrollers/nginx
  161  kubectl get pods

######Services
  165  kubectl apply -f nginx-deployment.yaml
  166  kubectl get pods
  169  vi nginx-service.yml
  170  kubectl apply -f nginx-service.yml
  172  kubectl get svc

### Service discovery
  182  kubectl apply -f nginx-deployment.yaml
  183  kubectl apply -f nginx-service.yml
  184  kubectl get pods
  185  kubectl exec nginx-deployment1-689676bf79-2zzqh -- printenv | grep SERVICE
  187  kubectl scale deployment nginx-deployment1 --replicas=0
  188  kubectl get pods
  190  kubectl scale deployment nginx-deployment1 --replicas=3
  191  kubectl get pods
  192  kubectl get pods -l app=nginx1
  193  kubectl exec nginx-deployment1-689676bf79-2w9sr -- printenv | grep SERVICE
 # method 2 
  kubectl get services kube-dns --namespace=kube-system
  213  kubectl run curl --image=radial/busyboxplus:curl -i --tty
  nslookup my-nginx

### ConfigMap
  mkdir -p configure-pod-container/configmap/
  217  ls
  218  wget https://kubernetes.io/examples/configmap/game.properties -O configure-pod-container/configmap/game.properties
  219  wget https://kubernetes.io/examples/configmap/ui.properties -O configure-pod-container/configmap/ui.properties
  220  ls
  221  cd configure-pod-container/
  222  ls
  223  cd configmap/
  224  ls
  225  vi game.properties
  226  vi ui.properties
  227  vi game.properties
  229  ls
  # should be in kubernetes path
  230  kubectl create configmap game-config --from-file=./configure-pod-container/configmap/
  231  cd ../../
  232  kubectl create configmap game-config --from-file=configure-pod-container/configmap/
  233  kubectl describe configmaps game-config
  234  kubectl get configmaps game-config -o yaml

### Secrets
  237  echo -n 'admin' > ./username.txt
  238  echo -n '1f2d1e2e67df' > ./password.txt
  239  ls
  240  kubectl create secret generic db-user-pass --from-file=./username.txt --from-file=./password.txt
  241  kubectl get secrets
  242  kubectl describe secrets/db-user-pass
  243  kubectl get secret db-user-pass -o yaml
  245  echo 'MWYyZDFlMmU2N2Rm' | base64 --decode

  #### kubeadm installation in master
    1  apt-get update
    2  swapoff -a
    3  vi /etc/hosts
    8  sudo service ssh start
    9  eval `ssh-agent -s`
   10  ssh-keygen -t rsa   #passwordless connection
   11  ssh root@node2 mkdir -p .ssh
   12  cat .ssh/id_rsa.pub | ssh root@node2 'cat >> .ssh/authorized_keys'
   13  ssh root@node2 "chmod 700 .ssh; chmod 640 .ssh/authorized_keys"
   14  ssh root@node2
   16  apt-get install -y docker.io
   17  sudo apt-get update && sudo apt-get install -y apt-transport-https
   18  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
   19  echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
   20  sudo apt-get update
   21  sudo apt-get install -y kubectl
   22  apt-get install -y kubelet kubeadm kubectl
   23  nano /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
   # include this line Environment="cgroup-driver=systemd/cgroup-driver=cgroupfs"
# reboot
   kubeadm init --apiserver-advertise-address=<ipaddress> --pod-network-cidr=10.244.0.0/16
   31  adduser demo
   32  usermod -aG sudo demo
   33  mkdir -p $HOME/.kube
   34  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
   35  sudo chown $(id -u):$(id -g) $HOME/.kube/config
   36  kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml
   37  kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta4/aio/deploy/recommended.yaml
   38  kubectl get svc --all-namespaces
   39  kubectl edit services kubernetes-dashboard -n kubernetes-dashboard
   40  kubectl get svc --all-namespaces
   kubectl proxy & # open another terminal
   https://<ipaddress>:31939/#/login
   29  kubectl create serviceaccount dashboard -n default
   30  kubectl create clusterrolebinding dashboard-admin -n default  --clusterrole=cluster-admin  --serviceaccount=default:dashboard
   31  kubectl get secret $(kubectl get serviceaccount dashboard -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode
   # if the token expires run the below command once again and use the token
    10 kubectl get secret $(kubectl get serviceaccount dashboard -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode
# if join token for the worker node is lost you can make use of 
kubeadm token create --print-join-command	


### in worker node
   15  apt-get update
   16  swapoff -a
   17  vi /etc/hosts
   18  sudo apt-get update && sudo apt-get install -y apt-transport-https
   19  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
   20  echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
   21  sudo apt-get update
   22  sudo apt-get install -y kubectl
   23  apt-get install -y kubelet kubeadm kubectl
   24  nano /etc/systemd/system/kubelet.service.d/10-kubeadm.con
   25  nano /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
   26  kubeadm join <token>


   ## Pod Presets
   --extra-config=apiserver.runtime-config=settings.k8s.io/v1alpha1=true
   added at starting of cluster
